'use client'

/**
 * NeuraOps Generated Files Component
 * Displays and manages files generated by CLI commands
 * Features: Delete, Download, View, Collapsible panel
 */
import { useState, useEffect } from 'react'
import { Download, FileText, Eye, X, RefreshCw, Trash2, ChevronDown, ChevronUp, FolderOpen, Trash } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { apiService } from '@/services/api'

interface GeneratedFile {
  id: string
  name: string
  type: string
  size: number
  created: string | Date
  command: string
  path: string
  content?: string
}

export default function GeneratedFiles() {
  const [files, setFiles] = useState<GeneratedFile[]>([])
  const [selectedFile, setSelectedFile] = useState<GeneratedFile | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [isCollapsed, setIsCollapsed] = useState(false)
  const [isDeleting, setIsDeleting] = useState<string | null>(null)

  // Fetch generated files from the API
  const fetchGeneratedFiles = async () => {
    setIsLoading(true)
    try {
      const response = await apiService.request<{ files: GeneratedFile[] }>('/api/cli/files', {
        method: 'GET'
      })
      
      // Convert created dates from string to Date objects
      const filesWithDates = response.files.map(file => ({
        ...file,
        created: typeof file.created === 'string' ? new Date(file.created) : file.created
      }))
      
      setFiles(filesWithDates)
    } catch (error) {
      console.error('Failed to fetch generated files:', error)
      setFiles([]) // Set empty array on error
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchGeneratedFiles()
  }, [])

  const downloadFile = async (file: GeneratedFile) => {
    try {
      // Fixed: Use apiService token instead of localStorage directly
      const token = apiService.getCurrentToken()
      if (!token) {
        throw new Error('Authentication required')
      }

      // Use the corrected API endpoint
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000'}/api/cli/files/${file.id}/download`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      })
      
      if (!response.ok) {
        throw new Error(`Download failed: ${response.statusText}`)
      }
      
      // Create blob from response
      const blob = await response.blob()
      const url = URL.createObjectURL(blob)
      
      // Create and trigger download
      const a = document.createElement('a')
      a.href = url
      a.download = file.name
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Failed to download file:', error)
      alert(`Failed to download file: ${error instanceof Error ? error.message : 'Unknown error'}`)
    }
  }

  const deleteFile = async (file: GeneratedFile) => {
    if (!confirm(`Are you sure you want to delete "${file.name}"?`)) {
      return
    }

    setIsDeleting(file.id)
    try {
      await apiService.request(`/api/cli/files/${file.id}`, {
        method: 'DELETE'
      })
      
      // Remove file from the list
      setFiles(prev => prev.filter(f => f.id !== file.id))
      
      // Close modal if this file was selected
      if (selectedFile?.id === file.id) {
        setSelectedFile(null)
      }
    } catch (error) {
      console.error('Failed to delete file:', error)
      alert(`Failed to delete file: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
      setIsDeleting(null)
    }
  }

  const deleteAllFiles = async () => {
    if (files.length === 0) return
    
    if (!confirm(`Are you sure you want to delete ALL ${files.length} files? This action cannot be undone.`)) {
      return
    }

    setIsLoading(true)
    try {
      // Delete all files one by one
      const deletePromises = files.map(file => 
        apiService.request(`/api/cli/files/${file.id}`, {
          method: 'DELETE'
        })
      )
      
      await Promise.all(deletePromises)
      
      // Clear the files list
      setFiles([])
      
      // Close modal if open
      setSelectedFile(null)
      
      alert(`Successfully deleted ${files.length} files.`)
    } catch (error) {
      console.error('Failed to delete all files:', error)
      alert(`Failed to delete all files: ${error instanceof Error ? error.message : 'Unknown error'}`)
      
      // Refresh the list to see what was actually deleted
      fetchGeneratedFiles()
    } finally {
      setIsLoading(false)
    }
  }

  const viewFile = async (file: GeneratedFile) => {
    try {
      if (!file.content) {
        // Fetch content from API
        const response = await apiService.request<{ content: string, file: GeneratedFile }>(`/api/cli/files/${file.id}/content`, {
          method: 'GET'
        })
        
        // Update file with content
        file.content = response.content
      }
      setSelectedFile(file)
    } catch (error) {
      console.error('Failed to load file content:', error)
      // Set fallback content
      file.content = `Error loading content for ${file.name}\n\nGenerated by NeuraOps CLI\nCommand: ${file.command}\nCreated: ${typeof file.created === 'string' ? file.created : file.created.toISOString()}`
      setSelectedFile(file)
    }
  }

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 B'
    const k = 1024
    const sizes = ['B', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]
  }

  const getFileIcon = (type: string) => {
    switch (type.toLowerCase()) {
      case 'dockerfile':
      case 'terraform':
      case 'yaml':
      case 'json':
        return <FileText className="h-4 w-4" />
      default:
        return <FileText className="h-4 w-4" />
    }
  }

  return (
    <div className="space-y-4">
      {/* Collapsible Header */}
      <div className="flex justify-between items-center">
        <button
          onClick={() => setIsCollapsed(!isCollapsed)}
          className="flex items-center space-x-2 text-left group"
        >
          <div className="flex items-center space-x-2">
            <FolderOpen className="h-5 w-5 text-blue-400" />
            <div>
              <h3 className="text-lg font-semibold text-white group-hover:text-blue-400 transition-colors">
                Generated Files {files.length > 0 && `(${files.length})`}
              </h3>
            </div>
          </div>
          {isCollapsed ? (
            <ChevronDown className="h-4 w-4 text-gray-400 group-hover:text-white transition-colors" />
          ) : (
            <ChevronUp className="h-4 w-4 text-gray-400 group-hover:text-white transition-colors" />
          )}
        </button>
        
        {!isCollapsed && (
          <div className="flex items-center space-x-2">
            <Button
              onClick={deleteAllFiles}
              disabled={isLoading || files.length === 0}
              variant="outline"
              size="sm"
              className="bg-dark-700 border-gray-600 hover:bg-red-600 text-gray-400 hover:text-white"
              title="Delete all files"
            >
              <Trash className="h-4 w-4" />
            </Button>
            <Button
              onClick={fetchGeneratedFiles}
              disabled={isLoading}
              variant="outline"
              size="sm"
              className="bg-dark-700 border-gray-600 hover:bg-dark-600"
              title="Refresh files"
            >
              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />
            </Button>
          </div>
        )}
      </div>

      {/* Collapsible Content */}
      {!isCollapsed && (
        <>
          {/* Files List */}
          {files.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <FileText className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p>No files generated yet</p>
              <p className="text-sm mt-1">
                Try running: <code className="text-green-400 bg-dark-900 px-2 py-1 rounded">infra generate basic-webapp</code>
              </p>
            </div>
          ) : (
            <div className="space-y-2">
              {files.map((file) => (
                <div
                  key={file.id}
                  className="flex items-center justify-between p-3 bg-dark-700 rounded-lg border border-gray-600 hover:border-gray-500 transition-colors"
                >
                  <div className="flex items-center space-x-3">
                    <div className="text-blue-400">
                      {getFileIcon(file.type)}
                    </div>
                    <div>
                      <div className="text-white font-medium">{file.name}</div>
                      <div className="text-xs text-gray-400">
                        {formatFileSize(file.size)} • {(typeof file.created === 'string' ? new Date(file.created) : file.created).toLocaleDateString()} • {file.command}
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button
                      onClick={() => viewFile(file)}
                      size="sm"
                      variant="ghost"
                      className="text-gray-400 hover:text-white"
                      title="View file"
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button
                      onClick={() => downloadFile(file)}
                      size="sm"
                      variant="ghost"
                      className="text-gray-400 hover:text-white"
                      title="Download file"
                    >
                      <Download className="h-4 w-4" />
                    </Button>
                    <Button
                      onClick={() => deleteFile(file)}
                      size="sm"
                      variant="ghost"
                      className="text-gray-400 hover:text-red-400"
                      disabled={isDeleting === file.id}
                      title="Delete file"
                    >
                      <Trash2 className={`h-4 w-4 ${isDeleting === file.id ? 'animate-pulse' : ''}`} />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      )}

      {/* File Viewer Modal */}
      {selectedFile && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-dark-800 border border-gray-600 rounded-lg w-full max-w-4xl h-3/4 flex flex-col">
            {/* Modal Header */}
            <div className="flex justify-between items-center p-4 border-b border-gray-600">
              <div>
                <h4 className="text-lg font-semibold text-white">{selectedFile.name}</h4>
                <p className="text-sm text-gray-400">Generated by: {selectedFile.command}</p>
              </div>
              <div className="flex items-center space-x-2">
                <Button
                  onClick={() => downloadFile(selectedFile)}
                  size="sm"
                  variant="outline"
                  className="bg-dark-700 border-gray-600 hover:bg-dark-600"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download
                </Button>
                <Button
                  onClick={() => deleteFile(selectedFile)}
                  size="sm"
                  variant="outline"
                  className="bg-dark-700 border-gray-600 hover:bg-red-600 text-gray-400 hover:text-white"
                  disabled={isDeleting === selectedFile.id}
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </Button>
                <Button
                  onClick={() => setSelectedFile(null)}
                  size="sm"
                  variant="ghost"
                  className="text-gray-400 hover:text-white"
                >
                  <X className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            {/* File Content */}
            <div className="flex-1 overflow-auto">
              <pre className="p-4 text-sm text-gray-300 font-mono whitespace-pre-wrap">
                {selectedFile.content || 'Loading...'}
              </pre>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}